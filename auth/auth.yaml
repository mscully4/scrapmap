AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: ""

Parameters:
  pythonPath:
    Type: String
  pythonVersion:
    Type: String
  apiStageName:
    Type: String
  rootResourceId:
    Type: String
  restApiId:
    Type: String
  pythonVersion:
    Type: String
  lambdaLayerARN:
    Type: String
  cognitoUserPoolId:
    Type: String
  cognitoClientId:
    Type: String
  cognitoClientSecret:
    Type: String

Resources:
  ### /auth ###
  AuthResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref restApiId
      ParentId: !Ref rootResourceId
      PathPart: auth

  ### /auth/create_user ###
  CreateUserResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref restApiId
      ParentId: !Ref AuthResource
      PathPart: create_user

  CreateUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt CreateUserFunction.Arn
      ResourceId: !Ref CreateUserResource
      RestApiId: !Ref restApiId

  CreateUserFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: !Ref pythonVersion
      CodeUri: ./create_user/
      Description: 'A function for creating users'
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::735029168602:role/Travelmap-Lambda'
      Environment:
        Variables:
          PYTHONPATH: !Ref pythonPath
          USER_POOL_ID: !Ref cognitoUserPoolId
          CLIENT_ID: !Ref cognitoClientId
          CLIENT_SECRET: !Ref cognitoClientSecret

  CreateUserInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateUserFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/POST/auth/create_user"
  
  ### /auth/verify_user ###
  AuthVerifyUserResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref restApiId
      ParentId: !Ref AuthResource
      PathPart: verify_user

  VerifyUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt VerifyUserFunction.Arn
      ResourceId: !Ref AuthVerifyUserResource
      RestApiId: !Ref restApiId

  VerifyUserFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./verify_user/
      Description: 'A function for retrieving verifying users'
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::735029168602:role/Travelmap-Lambda'
      Environment:
        Variables:
          PYTHONPATH: !Ref pythonPath
          USER_POOL_ID: !Ref cognitoUserPoolId
          CLIENT_ID: !Ref cognitoClientId
          CLIENT_SECRET: !Ref cognitoClientSecret

  VerifyUserInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref VerifyUserFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/POST/auth/verify_user"

  ### /auth/login ###
  LoginResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref restApiId
      ParentId: !Ref AuthResource
      PathPart: login
  
  LoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LoginFunction.Arn
      ResourceId: !Ref LoginResource
      RestApiId: !Ref restApiId

  LoginFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./login/
      Description: 'A function for generating authorization tokens'
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::735029168602:role/ScrapMap-Lambda-Auth'
      Environment:
        Variables:
          PYTHONPATH: !Ref pythonPath
          USER_POOL_ID: !Ref cognitoUserPoolId
          CLIENT_ID: !Ref cognitoClientId
          CLIENT_SECRET: !Ref cognitoClientSecret

  LoginInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LoginFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/POST/auth/login"

  ### /auth/change_password ###
  ChangePasswordResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref restApiId
      ParentId: !Ref AuthResource
      PathPart: change_password
  
  ChangePasswordMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt ChangePasswordFunction.Arn
      ResourceId: !Ref ChangePasswordResource
      RestApiId: !Ref restApiId

  ChangePasswordFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./change_password/
      Description: 'A function for responding to auth challenges'
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::735029168602:role/ScrapMap-Lambda-Auth'
      Environment:
        Variables:
          PYTHONPATH: !Ref pythonPath
          USER_POOL_ID: !Ref cognitoUserPoolId
          CLIENT_ID: !Ref cognitoClientId
          CLIENT_SECRET: !Ref cognitoClientSecret

  ChangePasswordInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ChangePasswordFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/POST/auth/change_password"

  ### /auth/forgot_password ###
  ForgotPasswordResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref restApiId
      ParentId: !Ref AuthResource
      PathPart: forgot_password
  
  ForgotPasswordMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt ForgotPasswordFunction.Arn
      ResourceId: !Ref ForgotPasswordResource
      RestApiId: !Ref restApiId

  ForgotPasswordFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./forgot_password/
      Description: 'A function for resending the verification code'
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::735029168602:role/Travelmap-Lambda'
      Environment:
        Variables:
          PYTHONPATH: !Ref pythonPath
          USER_POOL_ID: !Ref cognitoUserPoolId
          CLIENT_ID: !Ref cognitoClientId
          CLIENT_SECRET: !Ref cognitoClientSecret

  ForgotPasswordInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ForgotPasswordFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/POST/auth/forgot_password"

  ### /auth/confirm_forgot_password ###
  ConfirmForgotPasswordResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref restApiId
      ParentId: !Ref AuthResource
      PathPart: confirm_forgot_password
  
  ConfirmForgotPasswordMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt ConfirmForgotPasswordFunction.Arn
      ResourceId: !Ref ConfirmForgotPasswordResource
      RestApiId: !Ref restApiId

  ConfirmForgotPasswordFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./confirm_forgot_password/
      Description: 'A function for responding to auth challenges'
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::735029168602:role/ScrapMap-Lambda-Auth'
      Environment:
        Variables:
          PYTHONPATH: !Ref pythonPath
          USER_POOL_ID: !Ref cognitoUserPoolId
          CLIENT_ID: !Ref cognitoClientId
          CLIENT_SECRET: !Ref cognitoClientSecret

  ConfirmForgotPasswordInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConfirmForgotPasswordFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/POST/auth/confirm_forgot_password"
    
  ### /auth/respond_to_auth_challenge ###
  RespondToAuthChallengeResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref restApiId
      ParentId: !Ref AuthResource
      PathPart: respond_to_auth_challenge
  
  RespondToAuthChallengeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt RespondToAuthChallengeFunction.Arn
      ResourceId: !Ref RespondToAuthChallengeResource
      RestApiId: !Ref restApiId

  RespondToAuthChallengeFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./respond_to_auth_challenge/
      Description: 'A function for responding to auth challenges'
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::735029168602:role/ScrapMap-Lambda-Auth'
      Environment:
        Variables:
          PYTHONPATH: !Ref pythonPath
          USER_POOL_ID: !Ref cognitoUserPoolId
          CLIENT_ID: !Ref cognitoClientId
          CLIENT_SECRET: !Ref cognitoClientSecret

  RespondToAuthChallengeInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RespondToAuthChallengeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/POST/auth/respond_to_auth_challenge"

  ### resend_verification_code ###
  AuthResendVerificationCodeResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref restApiId
      ParentId: !Ref AuthResource
      PathPart: resend_verification_code
  
  ResendVerificationCodeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt ResendVerificationCodeFunction.Arn
      ResourceId: !Ref AuthResendVerificationCodeResource
      RestApiId: !Ref restApiId

  ResendVerificationCodeFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./resend_verification_code/
      Description: 'A function for resending the verification code'
      MemorySize: 128
      Timeout: 3
      Role: 'arn:aws:iam::735029168602:role/ScrapMap-Lambda-Auth'
      Environment:
        Variables:
          PYTHONPATH: !Ref pythonPath
          USER_POOL_ID: !Ref cognitoUserPoolId
          CLIENT_ID: !Ref cognitoClientId
          CLIENT_SECRET: !Ref cognitoClientSecret

  ResendVerificationCodeInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ResendVerificationCodeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/POST/auth/resend_verification_code"

  AuthAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CreateUserMethod
      - VerifyUserMethod
      - LoginMethod
      - ChangePasswordMethod
      - ForgotPasswordMethod
      - ConfirmForgotPasswordMethod
      - RespondToAuthChallengeMethod
      - ResendVerificationCodeMethod
    Properties:
      RestApiId: !Ref restApiId
      StageName: !Ref apiStageName
